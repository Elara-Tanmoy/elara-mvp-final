# ==============================================================================
# ELARA BACKEND API - DOCKERFILE (Development Mode - Like Vercel/Render)
# ==============================================================================
# Build from repository root: docker build -f gcp-infrastructure/docker/Dockerfile.backend .
# ==============================================================================

FROM node:20-alpine AS production

# Install OpenSSL, Chromium, and dependencies for Prisma + Puppeteer
RUN apk add --no-cache \
    openssl \
    openssl-dev \
    chromium \
    nss \
    freetype \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    font-noto-emoji

RUN npm install -g pnpm@latest tsx@latest

# Tell Puppeteer to use installed Chromium
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true

# Use existing node user (UID 1000)
WORKDIR /app

# Copy workspace config
COPY package.json pnpm-workspace.yaml ./
COPY pnpm-lock.yaml ./

# Copy package.json files
COPY packages/backend/package.json ./packages/backend/
COPY packages/shared/package.json ./packages/shared/

# Install ALL dependencies (not just prod, since we need TypeScript runtime)
RUN pnpm install --no-frozen-lockfile

# Copy source code (Cache busted: 2025-10-13-20:20)
COPY packages/backend ./packages/backend
COPY packages/shared ./packages/shared

# Generate Prisma client
WORKDIR /app/packages/backend
RUN pnpm prisma generate

# Create directories and set permissions
RUN mkdir -p /tmp/uploads /app/uploads && \
    chown -R node:node /app /tmp/uploads

USER node

EXPOSE 3001

HEALTHCHECK --interval=30s --timeout=5s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Run with tsx (TypeScript execution) instead of compiling
CMD ["tsx", "src/index.ts"]
