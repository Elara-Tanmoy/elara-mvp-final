# ==============================================================================
# ELARA PLATFORM - PRODUCTION DEPLOYMENT WORKFLOW
# ==============================================================================
# Triggered on: push to main branch, manual dispatch
# Actions: Build Docker images → Push to GCR → Deploy to GKE
# ==============================================================================

name: Deploy to Production

on:
  push:
    branches:
      - main
    paths:
      - 'packages/**'
      - 'kubernetes/**'
      - 'infrastructure/**'
      - '.github/workflows/deploy-production.yml'

  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - backend
          - worker
          - proxy
          - frontend

env:
  PROJECT_ID: elara-mvp-13082025-u1
  GKE_CLUSTER: elara-gke-us-west1
  GKE_REGION: us-west1
  GCR_REGISTRY: gcr.io

jobs:
  # ==============================================================================
  # JOB 1: BUILD AND PUSH DOCKER IMAGES
  # ==============================================================================
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    strategy:
      matrix:
        service: [backend, worker, proxy, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker gcr.io --quiet

      - name: Extract version
        id: version
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "version=v1.0.$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: Determine Dockerfile path
        id: dockerfile
        run: |
          case "${{ matrix.service }}" in
            backend)
              echo "path=packages/backend/Dockerfile" >> $GITHUB_OUTPUT
              echo "context=packages/backend" >> $GITHUB_OUTPUT
              ;;
            worker)
              echo "path=packages/backend/Dockerfile" >> $GITHUB_OUTPUT
              echo "context=packages/backend" >> $GITHUB_OUTPUT
              ;;
            proxy)
              echo "path=packages/proxy-service/Dockerfile" >> $GITHUB_OUTPUT
              echo "context=packages/proxy-service" >> $GITHUB_OUTPUT
              ;;
            frontend)
              echo "path=packages/frontend/Dockerfile" >> $GITHUB_OUTPUT
              echo "context=packages/frontend" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.dockerfile.outputs.context }}
          file: ${{ steps.dockerfile.outputs.path }}
          push: true
          tags: |
            ${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ matrix.service }}:${{ steps.version.outputs.version }}
            ${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_URL=http://34.36.48.252/api
            VITE_WS_URL=ws://34.36.48.252

      - name: Image scan (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ matrix.service }}:${{ steps.version.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail on vulnerabilities (log only)

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

    outputs:
      version: ${{ steps.version.outputs.version }}

  # ==============================================================================
  # JOB 2: DEPLOY TO GKE
  # ==============================================================================
  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --region=${{ env.GKE_REGION }} \
            --project=${{ env.PROJECT_ID }}

      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Update image tags in kustomization
        run: |
          cd kubernetes/overlays/production
          kustomize edit set image \
            gcr.io/${{ env.PROJECT_ID }}/backend-api:${{ needs.build.outputs.version }} \
            gcr.io/${{ env.PROJECT_ID }}/worker:${{ needs.build.outputs.version }} \
            gcr.io/${{ env.PROJECT_ID }}/proxy:${{ needs.build.outputs.version }} \
            gcr.io/${{ env.PROJECT_ID }}/frontend:${{ needs.build.outputs.version }}

      - name: Deploy to GKE
        run: |
          kubectl apply -k kubernetes/overlays/production

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/elara-api -n elara-backend --timeout=5m
          kubectl rollout status deployment/elara-worker -n elara-workers --timeout=5m
          kubectl rollout status deployment/elara-proxy -n elara-proxy --timeout=5m
          kubectl rollout status statefulset/chromadb -n elara-backend --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods -n elara-backend
          kubectl get pods -n elara-workers
          kubectl get pods -n elara-proxy

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30

          # Get load balancer IP
          LB_IP=$(kubectl get ingress elara-ingress -n elara-backend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

          # Health check
          curl -f http://$LB_IP/health || exit 1

          echo "✅ Deployment successful!"

  # ==============================================================================
  # JOB 3: NOTIFY
  # ==============================================================================
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()

    steps:
      - name: Send success notification
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment to production successful!"
          echo "Version: ${{ needs.build.outputs.version }}"

      - name: Send failure notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment to production failed!"
          echo "Check workflow logs for details"
          exit 1
