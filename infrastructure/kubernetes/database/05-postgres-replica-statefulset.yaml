apiVersion: v1
kind: Service
metadata:
  name: postgres-replica
  namespace: elara-backend-prod
  labels:
    app: postgresql
    role: replica
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgresql
  selector:
    app: postgresql
    role: replica
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-replica
  namespace: elara-backend-prod
  labels:
    app: postgresql
    role: replica
spec:
  serviceName: postgres-replica
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      role: replica
  template:
    metadata:
      labels:
        app: postgresql
        role: replica
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true

      initContainers:
      - name: setup-replica
        image: postgres:16-alpine
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Setting up replica from primary..."

          # Wait for primary to be ready
          until pg_isready -h postgres-primary -p 5432 -U elara_app; do
            echo "Waiting for primary PostgreSQL..."
            sleep 5
          done

          # Check if data directory is empty
          if [ -z "$(ls -A /var/lib/postgresql/data/pgdata)" ]; then
            echo "Initializing replica from primary..."

            # Create base backup from primary
            PGPASSWORD=$POSTGRES_REPLICATION_PASSWORD pg_basebackup \
              -h postgres-primary \
              -D /var/lib/postgresql/data/pgdata \
              -U replicator \
              -v \
              -P \
              -Xs \
              -R

            echo "Base backup completed. Creating standby.signal..."
            touch /var/lib/postgresql/data/pgdata/standby.signal

            echo "Replica setup completed successfully"
          else
            echo "Data directory not empty, skipping initialization"
          fi

        env:
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_REPLICATION_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata

        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data

      containers:
      - name: postgresql
        image: postgres:16-alpine
        imagePullPolicy: IfNotPresent

        ports:
        - containerPort: 5432
          name: postgresql
          protocol: TCP

        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata

        resources:
          requests:
            memory: "4Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "1000m"

        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
          readOnly: true

        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB && psql -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT pg_is_in_recovery();" | grep -q 't'
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
          items:
          - key: postgresql.conf
            path: postgresql.conf
          - key: pg_hba.conf
            path: pg_hba.conf

  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app: postgresql
        role: replica
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: premium-rwo
      resources:
        requests:
          storage: 200Gi
